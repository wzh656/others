#/*====== Copyright © 2020 by WZH 保留一切权利 ======*/

- //加载区(—1)
>>-- //加载指针(—2)
>>>>>>>>>> //加载区(10b)
>--- //寄存器(2b)，寄存器指针(—3)
>++ //代码指针(2)
>+++ +++ +++ +[
  --- --- --- -[ //不是换行
    ,--- --- --- - //直到是换行
  ]
  {
    ,--- --- --- - //直到不是换行
  }+++ +++ +++ +
  [>>+<<-]>> //右移2b
  {##【ERROR:LOAD CODE For No Args & Command】only 0
$}>
  ,{##【ERROR:LOAD CODE For No Args & Complete Command】only 1
$}>
  , //空位
  ,{##【ERROR:LOAD CODE For No Args】only 2
$}>
  ,{##【ERROR:LOAD CODE For No complete Args】only 3
$}>
  ,{##【ERROR:LOAD CODE For No complete Args】only 4
$}>
  ,{##【ERROR:LOAD CODE For No complete Args】only 5
$}>
  ,{##【ERROR:LOAD CODE For No complete Args】only 6
$}>
  ,{##【ERROR:LOAD CODE For No complete Args】only 7
$}
  >,
] //加载代码

>>>
+++>+++ //内存区(3，3)
>---- //内存指针(—4)
>--[++<--] //回到代码指针并删除
>>++> //右移2b

[ //循环运行代码
  [ //搬运一行代码
    [ //搬运单个字符到加载区后
      -
      +[-<+]-> //回到加载区后
      +
      >--[++>--]++> //回到代码指针后
    ]
    
    +[-<+]-> //回到加载区后
    [ //搬运代码到加载处和原处
      -
      >++[-->++]--> //找到加载指针后
      +
      >--[++>--]++> //回到代码指针后
      +
      <+[-<+]-> //回到加载区后
    ]
    ++[-->++] //找到加载指针
    >[-<+>]-- //移动加载指针
    
    >--[++>--] //回到代码指针
    >[-<+>] //搬运代码
    ++ //移动代码指针
    >
  ]
  <-->>++ //移动代码指针
  
  +[-<+]-> //回到加载区后
  ++++++++[>------<-] //规范化（—8*6=48）
  ++++++++[>>------<<-]
  ++++++++[>>>------<<<-]
  ++++++++[>>>>------<<<<-]
  ++++++++[>>>>>------<<<<<-]
  ++++++++[>>>>>>------<<<<<<-]
  ++++++++[>>>>>>>------<<<<<<<-]
  ++++++++[>>>>>>>>------<<<<<<<<-]
  
  ##
  >[ //第1位 不为0
    【ERROR:UNEXPECTED COMMAND】 1
    $
  ]
  { //第1位 为0
    #
    >{ ## //第2位 为0
      INT 命令：寄存器归零
      #
      >+++[--->+++]---> //找到寄存器指针后
      [-]>[-] //归零
      +[-<+]- //回到加载区
      ### #
    }
    +[-<+]- //回到加载区
    >>>
    
    
    -{ ##第2位 为1#
      + //补回为0
      ##
      MOV_REG 命令：移动到寄存器
      #
      +++[--->+++]---> //回到寄存器后
      [-] //清空
      +[-<+]- //回到加载区
      >>>
      
      >{
        >{
          >{
            >{
              >{
                >{
                  ##无参数，使用默认：内存
                  #
                  ++++[---->++++]----> //回到内存指针后
                  [ //搬运内存到寄存器临时区
                    -
                    +++[---<+++]--->> //回到寄存器后临时区
                    +
                    ++++[---->++++]----> //回到内存指针后
                  ]
                  +++[---<+++]--->> //回到寄存器后临时区
                  [ //复制临时区回寄存器和内存
                    -
                    <+
                    ++++[---->++++]----> //回到内存指针后
                    +
                    +++[---<+++]--->> //回到寄存器后临时区
                  ]
                  <+[-<+]- //回到加载区
                }
              }
            }
          }
        }
      }
      +[-<+]- //回到加载区
      >>> >>>>>> //到达—1位
      [
        -
        +++[--->+++]---> //回到寄存器后
        +
        <+[-<+]- //回到加载区
        >>> >>>>>> //到达—1位
      ]
      < //到达—2位
      [
        ->++++++++++++++++ //1=》16
        [
          -
          +++[--->+++]---> //回到寄存器后
          +
          <+[-<+]- //回到加载区
          >>> >>>>>> //到达—1位
        ]
        <
      ]
      +[-<+]- //回到加载区
      >>>
      -
      <+[-<+]- //回到加载区
      >+
      ### #
    }
    <+[-<+]- //回到加载区
    >[-]>>+
    
    
    --{ ##第2位 为2#
      ++ //补回为0
      ##
      MOV_MOM 命令：移动到内存
      #
      ++++[---->++++]----> //回到内存指针后
      [-] //清空
      +[-<+]- //回到加载区
      >>>
      
      >{
        >{
          >{
            >{
              >{
                >{ ##无参数，使用默认：寄存器#
                  +++[--->+++]---> //回到寄存器后
                  [ //复制寄存器到临时区和内存
                    -
                    >+
                    ++++[---->++++]----> //回到内存指针后
                    +
                    +++[---<+++]---> //回到寄存器后
                  ]
                  >
                  [ //搬运临时区到寄存器
                    -<+>
                  ]
                  <+[-<+]- //回到加载区
                }
              }
            }
          }
        }
      }
      +[-<+]- //回到加载区
      >>> >>>>>> //到达—1位
      [
        -
        ++++[---->++++]----> //回到内存指针后
        +
        <+[-<+]- //回到加载区
        >>> >>>>>> //到达—1位
      ]
      <
      [ //到达—2位
        ->++++++++++++++++ //1=》16
        [
          -
          ++++[---->++++]----> //回到内存指针后
          +
          <+[-<+]- //回到加载区
          >>> >>>>>> //到达—1位
        ]
        <
      ]
      +[-<+]- //回到加载区
      >>>
      --
      <+[-<+]- //回到加载区
      >+
      ### #
    }
    <+[-<+]- //回到加载区
    >[-]>>++
    
    
    ---{ ##第2位 为3#
      +++ //补回为0
      ##
      RIGHT命令：内存指针右移
      #
      
      >>> >>>[ //—1位
        ++++[---->++++] //回到内存指针并删除指针
        >[<+>-]
        ---- //添加内存指针
        
        <+[-<+]- //回到加载区
        >>>
        >>> >>>- //index:—1位
      ]
      <[ //index:—2位
        ->++++ ++++ ++++ ++++
        [ //index:—1位
          ++++[---->++++] //回到内存指针并删除指针
          >[<+>-]
          ---- //添加内存指针
          
          <+[-<+]- //回到加载区
          >>>
          >>> >>>- //index:—1位
        ]
        < //index:—2位
      ]
      <[ //index:—3位
        ->++++ ++++ ++++ ++++
        [ //index:—2位
          ->++++ ++++ ++++ ++++
          [ //index:—1位
            ++++[---->++++] //回到内存指针并删除指针
            >[<+>-]
            ---- //添加内存指针
            
            <+[-<+]- //回到加载区
            >>>
            >>> >>>- //index:—1位
          ]
          < //index:—2位
        ]
        < //index:—3位
      ]
      <[ //index:—4位
        ->++++ ++++ ++++ ++++
        [ //index:—3位
          ->++++ ++++ ++++ ++++
          [ //index:—2位
            ->++++ ++++ ++++ ++++
            [ //index:—1位
              ++++[---->++++] //回到内存指针并删除指针
              >[<+>-]
              ---- //添加内存指针
              
              <+[-<+]- //回到加载区
              >>>
              >>> >>>- //index:—1位
            ]
            < //index:—2位
          ]
          < //index:—3位
        ]
        < //index:—4位
      ]
      <[ //index:—5位
        ->++++ ++++ ++++ ++++
        [ //index:—4位
          ->++++ ++++ ++++ ++++
          [ //index:—3位
            ->++++ ++++ ++++ ++++
            [ //index:—2位
              ->++++ ++++ ++++ ++++
              [ //index:—1位
                ++++[---->++++] //回到内存指针并删除指针
                >[<+>-]
                ---- //添加内存指针
                
                <+[-<+]- //回到加载区
                >>>
                >>> >>>- //index:—1位
              ]
              < //index:—2位
            ]
            < //index:—3位
          ]
          < //index:—4位
        ]
        < //index:—5位
      ]
      <[ //index:—6位
        ->++++ ++++ ++++ ++++
        [ //index:—5位
          ->++++ ++++ ++++ ++++
          [ //index:—4位
            ->++++ ++++ ++++ ++++
            [ //index:—3位
              ->++++ ++++ ++++ ++++
              [ //index:—2位
                ->++++ ++++ ++++ ++++
                [ //index:—1位
                  ++++[---->++++] //回到内存指针并删除指针
                  >[<+>-]
                  ---- //添加内存指针
                  
                  <+[-<+]- //回到加载区
                  >>>
                  >>> >>>- //index:—1位
                ]
                < //index:—2位
              ]
              < //index:—3位
            ]
            < //index:—4位
          ]
          < //index:—5位
        ]
        < //index:—6位
      ]
      
      +[-<+]- //回到加载区
      >>>
      --- //让出去后补回为0
      <+[-<+]- //回到加载区
      >+
      ### #
    }
    <+[-<+]- //回到加载区
    >[-]>>+++
    
    
    --- -{ ##第2位 为4#
      +++ + //补回为0
      ##
      LEFT命令：内存指针左移
      #
      
      >>> >>>[ //—1位
        ++++[---->++++]---- //回到内存指针
        <---{ //溢出保护
          ## 【WARN: OVERFLOW】LEFT命令 溢出！
          #
          >++++ //删除内存指针
          >[<+>-] //往左搬运
          ---- //恢复内存指针
          
          <+[-<+]- //回到加载区
          >>>
          >[-] >[-] >[-]
          >[-] >[-] >[-]+ //清空参数
          
          ++++[---->++++]---- //回到内存指针
          <<+
        }
        +++
        ++++[---->++++] //回到内存指针并删除
        <[>+<-]
        ---- //恢复内存指针
        
        <---[+++<---]+++ //回到内存区指针
        <{ //无双内存区指针
          >>[-]+++ //恢复内存区指针
        }
        
        <+[-<+]- //回到加载区
        >>>
        >>> >>>-
      ]
      <[ //index:—2位
        ->++++ ++++ ++++ ++++
        [ //index:—1位
          ++++[---->++++]---- //回到内存指针
          <---{ //溢出保护
            ## 【WARN: OVERFLOW】LEFT命令 溢出！
            #
            >++++ //删除内存指针
            >[<+>-] //往左搬运
            ---- //恢复内存指针
            <<+
          }
          +++
          ++++[---->++++] //回到内存指针并删除
          <[>+<-]
          ---- //恢复内存指针
          
          <---[+++<---]+++ //回到内存区指针
          <{ //无双内存区指针
            >>[-]+++ //恢复内存区指针
          }
          
          <+[-<+]- //回到加载区
          >>>
          >>> >>>-
        ]
        < //index:—2位
      ]
      <[ //index:—3位
        ->++++ ++++ ++++ ++++
        [ //index:—2位
          ->++++ ++++ ++++ ++++
          [ //index:—1位
            ++++[---->++++]---- //回到内存指针
            <---{ //溢出保护
              ## 【WARN: OVERFLOW】LEFT命令 溢出！
              #
              >++++ //删除内存指针
              >[<+>-] //往左搬运
              ---- //恢复内存指针
              <<+
            }
            +++
            ++++[---->++++] //回到内存指针并删除
            <[>+<-]
            ---- //恢复内存指针
            
            <---[+++<---]+++ //回到内存区指针
            <{ //无双内存区指针
              >>[-]+++ //恢复内存区指针
            }
            
            <+[-<+]- //回到加载区
            >>>
            >>> >>>-
          ]
          < //index:—2位
        ]
        < //index:—3位
      ]
      <[ //index:—4位
        ->++++ ++++ ++++ ++++
        [ //index:—3位
          ->++++ ++++ ++++ ++++
          [ //index:—2位
            ->++++ ++++ ++++ ++++
            [ //index:—1位
              ++++[---->++++]---- //回到内存指针
              <---{ //溢出保护
                ## 【WARN: OVERFLOW】LEFT命令 溢出！
                #
                >++++ //删除内存指针
                >[<+>-] //往左搬运
                ---- //恢复内存指针
                <<+
              }
              +++
              ++++[---->++++] //回到内存指针并删除
              <[>+<-]
              ---- //恢复内存指针
              
              <---[+++<---]+++ //回到内存区指针
              <{ //无双内存区指针
                >>[-]+++ //恢复内存区指针
              }
              
              <+[-<+]- //回到加载区
              >>>
              >>> >>>-
            ]
            < //index:—2位
          ]
          < //index:—3位
        ]
        < //index:—4位
      ]
      <[ //index:—5位
        ->++++ ++++ ++++ ++++
        [ //index:—4位
          ->++++ ++++ ++++ ++++
          [ //index:—3位
            ->++++ ++++ ++++ ++++
            [ //index:—2位
              ->++++ ++++ ++++ ++++
              [ //index:—1位
                ++++[---->++++]---- //回到内存指针
                <---{ //溢出保护
                  ## 【WARN: OVERFLOW】LEFT命令 溢出！
                  #
                  >++++ //删除内存指针
                  >[<+>-] //往左搬运
                  ---- //恢复内存指针
                  <<+
                }
                +++
                ++++[---->++++] //回到内存指针并删除
                <[>+<-]
                ---- //恢复内存指针
                
                <---[+++<---]+++ //回到内存区指针
                <{ //无双内存区指针
                  >>[-]+++ //恢复内存区指针
                }
                
                <+[-<+]- //回到加载区
                >>>
                >>> >>>-
              ]
              < //index:—2位
            ]
            < //index:—3位
          ]
          < //index:—4位
        ]
        < //index:—5位
      ]
      <[ //index:—6位
        ->++++ ++++ ++++ ++++
        [ //index:—5位
          ->++++ ++++ ++++ ++++
          [ //index:—4位
            ->++++ ++++ ++++ ++++
            [ //index:—3位
              ->++++ ++++ ++++ ++++
              [ //index:—2位
                ->++++ ++++ ++++ ++++
                [ //index:—1位
                  ++++[---->++++]---- //回到内存指针
                  <---{ //溢出保护
                    ## 【WARN: OVERFLOW】LEFT命令 溢出！
                    #
                    >++++ //删除内存指针
                    >[<+>-] //往左搬运
                    ---- //恢复内存指针
                    <<+
                  }
                  +++
                  ++++[---->++++] //回到内存指针并删除
                  <[>+<-]
                  ---- //恢复内存指针
                  
                  <---[+++<---]+++ //回到内存区指针
                  <{ //无双内存区指针
                    >>[-]+++ //恢复内存区指针
                  }
                  
                  <+[-<+]- //回到加载区
                  >>>
                  >>> >>>-
                ]
                < //index:—2位
              ]
              < //index:—3位
            ]
            < //index:—4位
          ]
          < //index:—5位
        ]
        < //index:—6位
      ]
      
      +[-<+]- //回到加载区
      >>>
      --- - //让出去后补回为0
      <+[-<+]- //回到加载区
      >+
      ### #
    }
    <+[-<+]- //回到加载区
    >[-]>>+++ +
    
    
    --- --- ---{ ##第2位 为9#
      +++ +++ +++ //补回为0
      ##
      OUTPUT命令：输出内存字符
      #
      >{ //为0：输出寄存器
        >+++[--->+++]---> //回到寄存器后
        .
        <+[-<+]- //回到加载区（不为0可出）
      }
      +[-<+]-> //回到加载区后
      >>>[ //不为0：输出内存
        ++++[---->++++]----> //回到内存指针后
        .
        <+[-<+]-> //回到加载区后（为0可出）
      ]
      
      +[-<+]- //回到加载区
      >>>
      --- --- ---
      <+[-<+]- //回到加载区
      >+
      ### #
    }
    <+[-<+]- //回到加载区
    >[-]>>+++ +++ +++
    
    
    --- --- --- -{ ##第2位 为10#
      +++ +++ +++ + //补回为0
      ##
      END命令：终止程序
      #
      $
      +[-<+]- //回到加载区
      >>>
      --- --- --- -
      <+[-<+]- //回到加载区
      >+
      ### #
    }
    <+[-<+]- //回到加载区
    >[-]>>+++ +++ +++ +
    
    ##
    [ 第2位 不为INIT(0)#
      -[ ##，MOV_REG(1)#
        -[ ##，MOV_MEM(2)#
          -[ ##，RIGHT(3)#
            -[ ##，LEFT(4)#
              --- --[ ##，OUTPUT(9)#
                -[ ##，END(10)
                  +++ +++ +++ +
                  【ERROR:UNEXPECTED COMMAND】 2
                  $
                ]
              ]
            ]
          ]
        ]
      ]
    ]##
    第2位 符合#
    +[-<+]- //回到加载区
  }
  >++[-->++] //清空加载指针
  +[-<+]- //回到加载区
  >[-]
  >-- //加载指针(—2)
  >[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]
  >--[++>--]++> //回到代码指针后
]


/*
======指令集======
00 INT 寄存器初始化（归零）
01 MOV_REG [<number 16**2=1B> 内存] number =》 寄存器
02 MOV_MEM [<number 16**2=1B> 寄存器] number =》 内存
03 RIGHT [<number 16**6=16M> 寄存器] 右移number个
04 LEFT [<number 16**6=16M> 寄存器] 左移number个
05 ADD_ABSOLUTE <number 16**6=16M> 当前┼═寄存器，溢出则跳转number
06 ADD_RELATIVE <number 16**6/2=8M> 当前┼═寄存器，溢出则跳转number
07 GO_ABSOLUTE [<number 16**6=16M> 寄存器] 无条件跳转到绝对地址number
08 GO_RELATIVE [<number 16**6/2=8M> 寄存器—128] 无条件相对当前往后(前)跳转number
09 IF_EQU_ABSOLUTE <number 16**6=16M> 寄存器=内存则跳转到number
0A IF_EQU_RELATIVE <number 16**6/2=8M> 寄存器=内存则跳转到number
0B INPUT 输入到内存
0C OUTPUT <bool 1/0> 输出内存/寄存器字符
0D END 终止程序
====== END ======
====== Copyright © 2020 by WZH 保留一切权利 ======
*/


##
【Run BEAUTIFULLY】0 errors, 0 warnings！！！